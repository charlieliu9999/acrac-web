{
  "id": "snapshot_1758724845010_7x5p2d0zi",
  "approvalId": "approval_1758724178820_zw28i1cuv",
  "approvalTitle": "RAGAS 评测功能完成和优化 - 需求文档审批",
  "version": 2,
  "timestamp": "2025-09-24T14:40:45.010Z",
  "trigger": "revision_requested",
  "status": "pending",
  "content": "# RAGAS 评测功能完成和优化需求文档\n\n## 项目概述\n\n基于 ACRAC 医疗影像推荐系统的 RAGAS 评测功能现状分析，本项目旨在完成和优化 RAGAS 评测系统，解决当前存在的技术问题，提升评测准确性和用户体验，构建一个稳定、高效、易用的医疗领域 RAG 系统评测平台。\n\n## 产品愿景对齐\n\n本功能直接支持 ACRAC 系统的核心目标：提供高质量的医疗影像推荐服务。通过完善 RAGAS 评测功能，我们能够：\n- 量化评估 RAG 系统的推荐质量\n- 持续优化医疗知识检索和生成效果\n- 确保推荐结果的医学准确性和相关性\n- 建立可信任的医疗 AI 推荐系统\n\n## 需求列表\n\n### 需求 1：RAGAS 评测引擎稳定性修复\n\n**用户故事：** 作为系统管理员，我希望 RAGAS 评测引擎能够稳定运行，准确计算四个核心评测指标，不再出现 NaN 值和 IndexError 异常。\n\n#### 验收标准\n\n1. WHEN 系统启动时 THEN RAGAS 评测引擎应该能够成功初始化并加载配置\n2. WHEN 提供标准 RAGAS 数据格式时 THEN 系统应该返回四个评测指标的准确分数（0.0-1.0 范围）\n3. WHEN 评测过程中 THEN 系统不应该出现 IndexError 或 NaN 值异常\n4. WHEN faithfulness 评测时 THEN 系统应该能够检测答案与上下文的忠实度，目标分数 > 0.4\n5. WHEN context_precision 评测时 THEN 系统应该能够评估检索上下文的精确度，保持当前 0.8+ 水平\n6. WHEN context_recall 评测时 THEN 系统应该能够评估上下文覆盖度，目标分数 > 0.6\n7. WHEN answer_relevancy 评测时 THEN 系统应该能够正确解析 LLM 输出并返回 0.1-1.0 范围内的分数\n\n### 需求 2：医疗领域评测指标优化\n\n**用户故事：** 作为医疗 AI 开发者，我希望 RAGAS 评测系统能够针对医疗领域特点进行优化，提供更准确的医学内容评估。\n\n#### 验收标准\n\n1. WHEN 评测中文医学内容时 THEN 系统应该能够正确处理中文医学术语和概念\n2. WHEN 处理医学专业术语时 THEN 系统应该能够识别和评估医学知识的准确性\n3. WHEN 评测临床指南相关内容时 THEN 系统应该能够评估推荐与临床指南的一致性\n4. WHEN 评测影像学检查建议时 THEN 系统应该能够评估检查建议的医学合理性\n5. IF 评测结果包含医学错误信息 THEN 系统应该能够识别并给出低分\n\n### 需求 3：数据转换与验证系统\n\n**用户故事：** 作为开发人员，我希望有一个标准化的数据转换器，能够将 RAG 推理结果准确转换为 RAGAS 评测格式。\n\n#### 验收标准\n\n1. WHEN 输入 RAG 推理结果时 THEN 系统应该提取结构化的答案内容\n2. WHEN 处理上下文数据时 THEN 系统应该过滤重复内容并限制长度在 200 字符以内\n3. WHEN ground_truth 为空时 THEN 系统应该基于临床查询智能推断基础答案\n4. WHEN 数据验证失败时 THEN 系统应该提供详细的错误信息和修复建议\n5. IF 上下文数量超过 5 个 THEN 系统应该选择最相关的 5 个上下文\n6. WHEN 处理不同推理方法（rag/no-rag）时 THEN 系统应该能够正确解析和转换数据格式\n\n### 需求 4：API 集成与路由优化\n\n**用户故事：** 作为前端开发者，我希望 RAGAS 评测 API 接口清晰、稳定，能够支持批量评测和实时评测两种模式。\n\n#### 验收标准\n\n1. WHEN 调用 RAGAS 评测 API 时 THEN 系统应该提供统一的 API 端点\n2. WHEN 进行批量评测时 THEN 系统应该支持异步处理并返回任务 ID\n3. WHEN 查询评测进度时 THEN 系统应该提供实时的任务状态和进度信息\n4. WHEN 评测完成时 THEN 系统应该返回完整的评测结果和详细报告\n5. IF API 调用失败 THEN 系统应该返回清晰的错误信息和重试建议\n6. WHEN 处理大量评测任务时 THEN 系统应该能够合理分配资源，避免超时\n\n### 需求 5：评测结果可视化与报告\n\n**用户故事：** 作为医疗专家，我希望能够直观地查看 RAGAS 评测结果，了解系统推荐质量并识别改进方向。\n\n#### 验收标准\n\n1. WHEN 查看评测结果时 THEN 系统应该提供清晰的指标分数展示\n2. WHEN 分析评测趋势时 THEN 系统应该提供历史评测数据的对比分析\n3. WHEN 查看详细报告时 THEN 系统应该提供每个评测样本的详细分析\n4. WHEN 导出评测报告时 THEN 系统应该支持多种格式（JSON、Excel、PDF）\n5. IF 评测结果异常 THEN 系统应该提供问题诊断和改进建议\n6. WHEN 查看评测统计时 THEN 系统应该提供整体性能指标和分布情况\n\n### 需求 6：配置管理与监控\n\n**用户故事：** 作为系统运维人员，我希望能够灵活配置 RAGAS 评测参数，并监控评测系统的运行状态。\n\n#### 验收标准\n\n1. WHEN 修改评测配置时 THEN 系统应该支持动态配置更新，无需重启服务\n2. WHEN 监控系统状态时 THEN 系统应该提供实时的健康检查和性能指标\n3. WHEN 查看评测日志时 THEN 系统应该提供详细的调试信息和错误追踪\n4. WHEN 配置评测模型时 THEN 系统应该支持多种 LLM 模型和嵌入模型\n5. IF 评测服务异常 THEN 系统应该能够自动恢复或提供降级方案\n6. WHEN 查看资源使用情况时 THEN 系统应该提供 CPU、内存、网络等资源监控\n\n## 非功能性需求\n\n### 代码架构与模块化\n- **单一职责原则**：每个文件应该有单一、明确定义的职责\n- **模块化设计**：组件、工具和服务应该隔离且可重用\n- **依赖管理**：最小化模块间的相互依赖\n- **清晰接口**：定义组件和层之间的清晰契约\n- **错误处理**：实现统一的错误处理和日志记录机制\n\n### 性能\n- **评测响应时间**：单个评测样本处理时间 < 5 秒\n- **批量处理能力**：支持同时处理 100+ 个评测样本\n- **并发处理**：支持多用户同时进行评测操作\n- **资源优化**：合理使用 CPU 和内存资源，避免资源浪费\n\n### 安全性\n- **数据保护**：评测数据在传输和存储过程中加密\n- **访问控制**：实现基于角色的评测功能访问控制\n- **输入验证**：严格验证所有输入数据，防止注入攻击\n- **审计日志**：记录所有评测操作和配置变更\n\n### 可靠性\n- **系统稳定性**：评测系统可用性 > 99%\n- **错误恢复**：系统能够从临时错误中自动恢复\n- **数据一致性**：确保评测结果的数据完整性和一致性\n- **备份机制**：实现评测数据和配置的定期备份\n\n### 可用性\n- **用户界面**：提供直观、易用的评测界面\n- **操作指导**：提供清晰的操作说明和帮助文档\n- **错误提示**：提供友好的错误信息和解决建议\n- **多语言支持**：支持中文和英文界面\n",
  "fileStats": {
    "size": 6859,
    "lines": 127,
    "lastModified": "2025-09-24T14:29:52.005Z"
  },
  "comments": []
}